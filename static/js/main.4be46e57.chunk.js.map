{"version":3,"sources":["components/Screen.js","components/ButtonItem.js","components/App.js","serviceWorker.js","index.js"],"names":["Screen","props","className","operationUp","operationDown","ButtonItem","btnSign","id","operationSign","onClick","name","App","state","result","flag","forDot","dotCounter","buttons","addSign","e","text","target","setState","prevState","console","log","makeOperation","endsWith","includes","round","evaluate","toString","handleClearScreen","createButtons","map","key","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.4be46e57.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"../styles/Screen.css\";\r\n\r\nconst Screen = props => {\r\n  return (\r\n    <div className=\"screen\">\r\n      <div className=\"screenUp\">{props.operationUp}</div>\r\n      <div className=\"screenDown\">{props.operationDown}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Screen;\r\n","import React from \"react\";\r\nimport \"../styles/ButtonItem.css\";\r\n\r\nconst ButtonItem = props => {\r\n  const { btnSign, id, operationSign } = props;\r\n  return (\r\n    <li>\r\n      <button id={`btn${id}`} onClick={operationSign} name={btnSign}>\r\n        {btnSign}\r\n      </button>\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default ButtonItem;\r\n","import React, { Component } from \"react\";\r\nimport { evaluate, round } from \"mathjs\";\r\nimport \"../styles/App.css\";\r\nimport Screen from \"./Screen\";\r\nimport ButtonItem from \"./ButtonItem\";\r\n\r\nclass App extends Component {\r\n  state = {\r\n    operationUp: \"\",\r\n    operationDown: \"0\",\r\n    result: 0,\r\n    flag: false,\r\n    forDot: \"\",\r\n    dotCounter: 0,\r\n    buttons: [\r\n      { id: 1, btnSign: \"ON/C\" },\r\n      { id: 2, btnSign: \"7\" },\r\n      { id: 3, btnSign: \"8\" },\r\n      { id: 4, btnSign: \"9\" },\r\n      { id: 5, btnSign: \"/\" },\r\n      { id: 6, btnSign: \"4\" },\r\n      { id: 7, btnSign: \"5\" },\r\n      { id: 8, btnSign: \"6\" },\r\n      { id: 9, btnSign: \"x\" },\r\n      { id: 10, btnSign: \"1\" },\r\n      { id: 11, btnSign: \"2\" },\r\n      { id: 12, btnSign: \"3\" },\r\n      { id: 13, btnSign: \"-\" },\r\n      { id: 14, btnSign: \"0\" },\r\n      { id: 15, btnSign: \".\" },\r\n      { id: 16, btnSign: \"=\" },\r\n      { id: 17, btnSign: \"+\" }\r\n    ]\r\n  };\r\n  addSign = e => {\r\n    const text = e.target.name;\r\n    if (this.state.operationDown === \"0\" || this.state.operationDown === 0) {\r\n      if (text === \"/\" || text === \"x\") {\r\n        this.setState(prevState => ({\r\n          operationDown: \"0\"\r\n        }));\r\n      } else {\r\n        this.setState(prevState => ({\r\n          operationDown: \"\"\r\n        }));\r\n      }\r\n    }\r\n    if ((text === \"/\" || text === \"x\") && this.state.flag === false) {\r\n      console.log(\"aaa\");\r\n      this.setState(prevState => ({\r\n        operationDown: prevState.operationDown,\r\n        result: prevState.result\r\n      }));\r\n    } else if (this.state.dotCounter >= 1 && text === \".\") {\r\n      console.log(\"2\");\r\n      this.setState(prevState => ({\r\n        operationDown: prevState.operationDown,\r\n        result: prevState.result\r\n      }));\r\n    } else {\r\n      if (text === \"/\" || text === \"x\" || text === \"+\" || text === \"-\") {\r\n        this.setState(prevState => ({\r\n          operationDown: prevState.operationDown + text,\r\n          result: prevState.result + (text === \"x\" ? \"*\" : text),\r\n          flag: false,\r\n          dotCounter: 0\r\n        }));\r\n      } else if (text === \".\") {\r\n        this.setState(prevState => ({\r\n          operationDown: prevState.operationDown + text,\r\n          result: prevState.result + text,\r\n          flag: false,\r\n          dotCounter: prevState.dotCounter + 1\r\n        }));\r\n      } else {\r\n        console.log(\"ccc\");\r\n        this.setState(prevState => ({\r\n          operationDown: prevState.operationDown + text,\r\n          result: prevState.result + text,\r\n          flag: true\r\n        }));\r\n      }\r\n    }\r\n  };\r\n\r\n  makeOperation = () => {\r\n    if (\r\n      this.state.operationDown.endsWith(\"/\") ||\r\n      this.state.operationDown.endsWith(\"x\") ||\r\n      this.state.operationDown.endsWith(\"+\") ||\r\n      this.state.operationDown.endsWith(\"-\") ||\r\n      this.state.operationDown.endsWith(\".\")\r\n    ) {\r\n    } else {\r\n      if (this.state.operationDown.includes(\".\")) {\r\n        this.setState(prevState => ({\r\n          operationUp: prevState.operationDown + \"=\",\r\n          operationDown: round(evaluate(prevState.result), 10).toString(),\r\n          result: round(evaluate(prevState.result), 10),\r\n          dotCounter: 1\r\n        }));\r\n      } else {\r\n        this.setState(prevState => ({\r\n          operationUp: prevState.operationDown + \"=\",\r\n          operationDown: round(evaluate(prevState.result), 10).toString(),\r\n          result: round(evaluate(prevState.result), 10),\r\n          dotCounter: 0\r\n        }));\r\n      }\r\n    }\r\n  };\r\n\r\n  handleClearScreen = () => {\r\n    this.setState({\r\n      operationUp: \"\",\r\n      operationDown: 0,\r\n      result: 0,\r\n      flag: false,\r\n      dotCounter: 0\r\n    });\r\n  };\r\n  createButtons = () => {\r\n    const buttons = this.state.buttons.map(e => {\r\n      if (e.btnSign === \"ON/C\") {\r\n        return (\r\n          <ButtonItem\r\n            key={e.id}\r\n            id={e.id}\r\n            btnSign={e.btnSign}\r\n            operationSign={this.handleClearScreen}\r\n          />\r\n        );\r\n      } else if (e.btnSign === \"=\") {\r\n        return (\r\n          <ButtonItem\r\n            key={e.id}\r\n            id={e.id}\r\n            btnSign={e.btnSign}\r\n            operationSign={this.makeOperation}\r\n          />\r\n        );\r\n      } else {\r\n        return (\r\n          <ButtonItem\r\n            key={e.id}\r\n            id={e.id}\r\n            btnSign={e.btnSign}\r\n            operationSign={this.addSign}\r\n          />\r\n        );\r\n      }\r\n    });\r\n    return buttons;\r\n  };\r\n  render() {\r\n    return (\r\n      <div className=\"app\">\r\n        <h1>KASIO</h1>\r\n        <Screen\r\n          operationDown={this.state.operationDown}\r\n          operationUp={this.state.operationUp}\r\n        />\r\n        <ul>\r\n          <li>\r\n            <span></span>\r\n            <span></span>\r\n            <span></span>\r\n          </li>\r\n          {this.createButtons()}\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./styles/index.css\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}